// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Org is an object representing the database table.
type Org struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *orgR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orgL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrgColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var OrgWhere = struct {
	ID        whereHelperint64
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"orgs\".\"id\""},
	Name:      whereHelperstring{field: "\"orgs\".\"name\""},
	CreatedAt: whereHelpertime_Time{field: "\"orgs\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"orgs\".\"updated_at\""},
}

// OrgRels is where relationship names are stored.
var OrgRels = struct {
	Groups string
	Stores string
	Users  string
}{
	Groups: "Groups",
	Stores: "Stores",
	Users:  "Users",
}

// orgR is where relationships are stored.
type orgR struct {
	Groups GroupSlice
	Stores StoreSlice
	Users  UserSlice
}

// NewStruct creates a new relationship struct
func (*orgR) NewStruct() *orgR {
	return &orgR{}
}

// orgL is where Load methods for each relationship are stored.
type orgL struct{}

var (
	orgAllColumns            = []string{"id", "name", "created_at", "updated_at"}
	orgColumnsWithoutDefault = []string{"name"}
	orgColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	orgPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrgSlice is an alias for a slice of pointers to Org.
	// This should generally be used opposed to []Org.
	OrgSlice []*Org

	orgQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orgType                 = reflect.TypeOf(&Org{})
	orgMapping              = queries.MakeStructMapping(orgType)
	orgPrimaryKeyMapping, _ = queries.BindMapping(orgType, orgMapping, orgPrimaryKeyColumns)
	orgInsertCacheMut       sync.RWMutex
	orgInsertCache          = make(map[string]insertCache)
	orgUpdateCacheMut       sync.RWMutex
	orgUpdateCache          = make(map[string]updateCache)
	orgUpsertCacheMut       sync.RWMutex
	orgUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single org record from the query using the global executor.
func (q orgQuery) OneG(ctx context.Context) (*Org, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single org record from the query.
func (q orgQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Org, error) {
	o := &Org{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for orgs")
	}

	return o, nil
}

// AllG returns all Org records from the query using the global executor.
func (q orgQuery) AllG(ctx context.Context) (OrgSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Org records from the query.
func (q orgQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrgSlice, error) {
	var o []*Org

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Org slice")
	}

	return o, nil
}

// CountG returns the count of all Org records in the query, and panics on error.
func (q orgQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Org records in the query.
func (q orgQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count orgs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q orgQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orgQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if orgs exists")
	}

	return count > 0, nil
}

// Groups retrieves all the group's Groups with an executor.
func (o *Org) Groups(mods ...qm.QueryMod) groupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"groups\".\"org_id\"=?", o.ID),
	)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"groups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"groups\".*"})
	}

	return query
}

// Stores retrieves all the store's Stores with an executor.
func (o *Org) Stores(mods ...qm.QueryMod) storeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stores\".\"org_id\"=?", o.ID),
	)

	query := Stores(queryMods...)
	queries.SetFrom(query.Query, "\"stores\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stores\".*"})
	}

	return query
}

// Users retrieves all the user's Users with an executor.
func (o *Org) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"org_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orgL) LoadGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrg interface{}, mods queries.Applicator) error {
	var slice []*Org
	var object *Org

	if singular {
		object = maybeOrg.(*Org)
	} else {
		slice = *maybeOrg.(*[]*Org)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orgR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orgR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`groups`), qm.WhereIn(`groups.org_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load groups")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if singular {
		object.R.Groups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupR{}
			}
			foreign.R.Org = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrgID {
				local.R.Groups = append(local.R.Groups, foreign)
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Org = local
				break
			}
		}
	}

	return nil
}

// LoadStores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orgL) LoadStores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrg interface{}, mods queries.Applicator) error {
	var slice []*Org
	var object *Org

	if singular {
		object = maybeOrg.(*Org)
	} else {
		slice = *maybeOrg.(*[]*Org)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orgR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orgR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`stores`), qm.WhereIn(`stores.org_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stores")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stores")
	}

	if singular {
		object.R.Stores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeR{}
			}
			foreign.R.Org = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrgID {
				local.R.Stores = append(local.R.Stores, foreign)
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.Org = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orgL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrg interface{}, mods queries.Applicator) error {
	var slice []*Org
	var object *Org

	if singular {
		object = maybeOrg.(*Org)
	} else {
		slice = *maybeOrg.(*[]*Org)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orgR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orgR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.org_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Org = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrgID {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Org = local
				break
			}
		}
	}

	return nil
}

// AddGroupsG adds the given related objects to the existing relationships
// of the org, optionally inserting them as new records.
// Appends related to o.R.Groups.
// Sets related.R.Org appropriately.
// Uses the global database handle.
func (o *Org) AddGroupsG(ctx context.Context, insert bool, related ...*Group) error {
	return o.AddGroups(ctx, boil.GetContextDB(), insert, related...)
}

// AddGroups adds the given related objects to the existing relationships
// of the org, optionally inserting them as new records.
// Appends related to o.R.Groups.
// Sets related.R.Org appropriately.
func (o *Org) AddGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Group) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrgID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"org_id"}),
				strmangle.WhereClause("\"", "\"", 2, groupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrgID = o.ID
		}
	}

	if o.R == nil {
		o.R = &orgR{
			Groups: related,
		}
	} else {
		o.R.Groups = append(o.R.Groups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupR{
				Org: o,
			}
		} else {
			rel.R.Org = o
		}
	}
	return nil
}

// AddStoresG adds the given related objects to the existing relationships
// of the org, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Org appropriately.
// Uses the global database handle.
func (o *Org) AddStoresG(ctx context.Context, insert bool, related ...*Store) error {
	return o.AddStores(ctx, boil.GetContextDB(), insert, related...)
}

// AddStores adds the given related objects to the existing relationships
// of the org, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Org appropriately.
func (o *Org) AddStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Store) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrgID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"org_id"}),
				strmangle.WhereClause("\"", "\"", 2, storePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrgID = o.ID
		}
	}

	if o.R == nil {
		o.R = &orgR{
			Stores: related,
		}
	} else {
		o.R.Stores = append(o.R.Stores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeR{
				Org: o,
			}
		} else {
			rel.R.Org = o
		}
	}
	return nil
}

// AddUsersG adds the given related objects to the existing relationships
// of the org, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Org appropriately.
// Uses the global database handle.
func (o *Org) AddUsersG(ctx context.Context, insert bool, related ...*User) error {
	return o.AddUsers(ctx, boil.GetContextDB(), insert, related...)
}

// AddUsers adds the given related objects to the existing relationships
// of the org, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Org appropriately.
func (o *Org) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrgID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"org_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrgID = o.ID
		}
	}

	if o.R == nil {
		o.R = &orgR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Org: o,
			}
		} else {
			rel.R.Org = o
		}
	}
	return nil
}

// Orgs retrieves all the records using an executor.
func Orgs(mods ...qm.QueryMod) orgQuery {
	mods = append(mods, qm.From("\"orgs\""))
	return orgQuery{NewQuery(mods...)}
}

// FindOrgG retrieves a single record by ID.
func FindOrgG(ctx context.Context, iD int64, selectCols ...string) (*Org, error) {
	return FindOrg(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrg retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrg(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Org, error) {
	orgObj := &Org{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orgs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orgObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from orgs")
	}

	return orgObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Org) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Org) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orgs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(orgColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orgInsertCacheMut.RLock()
	cache, cached := orgInsertCache[key]
	orgInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orgAllColumns,
			orgColumnsWithDefault,
			orgColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orgType, orgMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orgType, orgMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orgs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orgs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into orgs")
	}

	if !cached {
		orgInsertCacheMut.Lock()
		orgInsertCache[key] = cache
		orgInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Org record using the global executor.
// See Update for more documentation.
func (o *Org) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Org.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Org) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	orgUpdateCacheMut.RLock()
	cache, cached := orgUpdateCache[key]
	orgUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orgAllColumns,
			orgPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update orgs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orgs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orgPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orgType, orgMapping, append(wl, orgPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update orgs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for orgs")
	}

	if !cached {
		orgUpdateCacheMut.Lock()
		orgUpdateCache[key] = cache
		orgUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q orgQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orgQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for orgs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for orgs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrgSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrgSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orgPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orgs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orgPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in org slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all org")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Org) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Org) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orgs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(orgColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orgUpsertCacheMut.RLock()
	cache, cached := orgUpsertCache[key]
	orgUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orgAllColumns,
			orgColumnsWithDefault,
			orgColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orgAllColumns,
			orgPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert orgs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orgPrimaryKeyColumns))
			copy(conflict, orgPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orgs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orgType, orgMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orgType, orgMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert orgs")
	}

	if !cached {
		orgUpsertCacheMut.Lock()
		orgUpsertCache[key] = cache
		orgUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Org record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Org) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Org record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Org) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Org provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orgPrimaryKeyMapping)
	sql := "DELETE FROM \"orgs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from orgs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for orgs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orgQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orgQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orgs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orgs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrgSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrgSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orgPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orgs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orgPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from org slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orgs")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Org) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Org provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Org) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrg(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrgSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty OrgSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrgSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrgSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orgPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orgs\".* FROM \"orgs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orgPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrgSlice")
	}

	*o = slice

	return nil
}

// OrgExistsG checks if the Org row exists.
func OrgExistsG(ctx context.Context, iD int64) (bool, error) {
	return OrgExists(ctx, boil.GetContextDB(), iD)
}

// OrgExists checks if the Org row exists.
func OrgExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orgs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if orgs exists")
	}

	return exists, nil
}
