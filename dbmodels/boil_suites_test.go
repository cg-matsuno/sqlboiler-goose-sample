// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Groups", testGroups)
	t.Run("GroupsUsers", testGroupsUsers)
	t.Run("Orgs", testOrgs)
	t.Run("Stores", testStores)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Groups", testGroupsDelete)
	t.Run("GroupsUsers", testGroupsUsersDelete)
	t.Run("Orgs", testOrgsDelete)
	t.Run("Stores", testStoresDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Groups", testGroupsQueryDeleteAll)
	t.Run("GroupsUsers", testGroupsUsersQueryDeleteAll)
	t.Run("Orgs", testOrgsQueryDeleteAll)
	t.Run("Stores", testStoresQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Groups", testGroupsSliceDeleteAll)
	t.Run("GroupsUsers", testGroupsUsersSliceDeleteAll)
	t.Run("Orgs", testOrgsSliceDeleteAll)
	t.Run("Stores", testStoresSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Groups", testGroupsExists)
	t.Run("GroupsUsers", testGroupsUsersExists)
	t.Run("Orgs", testOrgsExists)
	t.Run("Stores", testStoresExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Groups", testGroupsFind)
	t.Run("GroupsUsers", testGroupsUsersFind)
	t.Run("Orgs", testOrgsFind)
	t.Run("Stores", testStoresFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Groups", testGroupsBind)
	t.Run("GroupsUsers", testGroupsUsersBind)
	t.Run("Orgs", testOrgsBind)
	t.Run("Stores", testStoresBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Groups", testGroupsOne)
	t.Run("GroupsUsers", testGroupsUsersOne)
	t.Run("Orgs", testOrgsOne)
	t.Run("Stores", testStoresOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Groups", testGroupsAll)
	t.Run("GroupsUsers", testGroupsUsersAll)
	t.Run("Orgs", testOrgsAll)
	t.Run("Stores", testStoresAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Groups", testGroupsCount)
	t.Run("GroupsUsers", testGroupsUsersCount)
	t.Run("Orgs", testOrgsCount)
	t.Run("Stores", testStoresCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("Groups", testGroupsInsert)
	t.Run("Groups", testGroupsInsertWhitelist)
	t.Run("GroupsUsers", testGroupsUsersInsert)
	t.Run("GroupsUsers", testGroupsUsersInsertWhitelist)
	t.Run("Orgs", testOrgsInsert)
	t.Run("Orgs", testOrgsInsertWhitelist)
	t.Run("Stores", testStoresInsert)
	t.Run("Stores", testStoresInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("GroupToOrgUsingOrg", testGroupToOneOrgUsingOrg)
	t.Run("GroupsUserToGroupUsingGroup", testGroupsUserToOneGroupUsingGroup)
	t.Run("GroupsUserToUserUsingUser", testGroupsUserToOneUserUsingUser)
	t.Run("StoreToOrgUsingOrg", testStoreToOneOrgUsingOrg)
	t.Run("UserToOrgUsingOrg", testUserToOneOrgUsingOrg)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GroupToGroupsUsers", testGroupToManyGroupsUsers)
	t.Run("OrgToGroups", testOrgToManyGroups)
	t.Run("OrgToStores", testOrgToManyStores)
	t.Run("OrgToUsers", testOrgToManyUsers)
	t.Run("UserToGroupsUsers", testUserToManyGroupsUsers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("GroupToOrgUsingGroups", testGroupToOneSetOpOrgUsingOrg)
	t.Run("GroupsUserToGroupUsingGroupsUsers", testGroupsUserToOneSetOpGroupUsingGroup)
	t.Run("GroupsUserToUserUsingGroupsUsers", testGroupsUserToOneSetOpUserUsingUser)
	t.Run("StoreToOrgUsingStores", testStoreToOneSetOpOrgUsingOrg)
	t.Run("UserToOrgUsingUsers", testUserToOneSetOpOrgUsingOrg)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GroupToGroupsUsers", testGroupToManyAddOpGroupsUsers)
	t.Run("OrgToGroups", testOrgToManyAddOpGroups)
	t.Run("OrgToStores", testOrgToManyAddOpStores)
	t.Run("OrgToUsers", testOrgToManyAddOpUsers)
	t.Run("UserToGroupsUsers", testUserToManyAddOpGroupsUsers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Groups", testGroupsReload)
	t.Run("GroupsUsers", testGroupsUsersReload)
	t.Run("Orgs", testOrgsReload)
	t.Run("Stores", testStoresReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Groups", testGroupsReloadAll)
	t.Run("GroupsUsers", testGroupsUsersReloadAll)
	t.Run("Orgs", testOrgsReloadAll)
	t.Run("Stores", testStoresReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Groups", testGroupsSelect)
	t.Run("GroupsUsers", testGroupsUsersSelect)
	t.Run("Orgs", testOrgsSelect)
	t.Run("Stores", testStoresSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Groups", testGroupsUpdate)
	t.Run("GroupsUsers", testGroupsUsersUpdate)
	t.Run("Orgs", testOrgsUpdate)
	t.Run("Stores", testStoresUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Groups", testGroupsSliceUpdateAll)
	t.Run("GroupsUsers", testGroupsUsersSliceUpdateAll)
	t.Run("Orgs", testOrgsSliceUpdateAll)
	t.Run("Stores", testStoresSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
